/*
 * Copyright (C) 2019 Tristan Muller (tristan.muller@cirad.fr)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package github.karakoukie.jumlcreator.views;

import github.karakoukie.jumlcreator.MainFrameController;
import github.karakoukie.jumlcreator.TreeRenderer;
import github.karakoukie.jumlcreator.classes.JClass;
import github.karakoukie.jumlcreator.classes.JEnum;
import github.karakoukie.jumlcreator.classes.JInterface;
import github.karakoukie.jumlcreator.nodes.JNode;
import github.karakoukie.jumlcreator.nodes.JParentNode;
import github.karakoukie.jumlcreator.packages.JPackage;
import java.awt.Frame;
import java.util.List;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreeSelectionModel;

/**
 *
 * @author Tristan Muller (tristan.muller@cirad.fr)
 */
public class MainFrame extends javax.swing.JFrame {

    private final MainFrameController controller;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        setLocationRelativeTo(getParent());
        this.controller = new MainFrameController();
        this.jTree.setModel(null);
        jTree.getSelectionModel().setSelectionMode(
                TreeSelectionModel.SINGLE_TREE_SELECTION);
        jTree.setCellRenderer(new TreeRenderer());

        jButtonAddPackage.setEnabled(false);
        jButtonAddClass.setEnabled(false);
        jButtonAddInterface.setEnabled(false);
        jButtonAddEnum.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar = new javax.swing.JToolBar();
        jSeparator5 = new javax.swing.JToolBar.Separator();
        jButtonNewProject = new javax.swing.JButton();
        jButtonOpenProject = new javax.swing.JButton();
        jButtonSaveProject = new javax.swing.JButton();
        jButtonExportProject = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jButtonAddPackage = new javax.swing.JButton();
        jButtonAddClass = new javax.swing.JButton();
        jButtonAddInterface = new javax.swing.JButton();
        jButtonAddEnum = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        jButtonOptions = new javax.swing.JButton();
        jSeparator7 = new javax.swing.JToolBar.Separator();
        jSplitPane = new javax.swing.JSplitPane();
        jPanelProject = new javax.swing.JPanel();
        jToolBar4 = new javax.swing.JToolBar();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        jLabel2 = new javax.swing.JLabel();
        jSeparator6 = new javax.swing.JToolBar.Separator();
        jButtonRename = new javax.swing.JButton();
        jButtonMove = new javax.swing.JButton();
        jButtonDelete = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        jScrollPane = new javax.swing.JScrollPane();
        jTree = new javax.swing.JTree();
        jPanelFiles = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuItemNewProject = new javax.swing.JMenuItem();
        jMenuItemOpenProject = new javax.swing.JMenuItem();
        jMenuItemSaveProject = new javax.swing.JMenuItem();
        jMenuItemExportProject = new javax.swing.JMenuItem();
        jMenuAdd = new javax.swing.JMenu();
        jMenuItemAddPackage = new javax.swing.JMenuItem();
        jMenuItemAddClass = new javax.swing.JMenuItem();
        jMenuItemAddInterface = new javax.swing.JMenuItem();
        jMenuItemAddEnum = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setExtendedState(Frame.MAXIMIZED_BOTH);
        setPreferredSize(new java.awt.Dimension(800, 600));

        jToolBar.setBackground(new java.awt.Color(255, 255, 255));
        jToolBar.setFloatable(false);
        jToolBar.add(jSeparator5);

        jButtonNewProject.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/document-new.png"))); // NOI18N
        jButtonNewProject.setFocusable(false);
        jButtonNewProject.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonNewProject.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonNewProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewProjectActionPerformed(evt);
            }
        });
        jToolBar.add(jButtonNewProject);

        jButtonOpenProject.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/document-open.png"))); // NOI18N
        jButtonOpenProject.setFocusable(false);
        jButtonOpenProject.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonOpenProject.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonOpenProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOpenProjectActionPerformed(evt);
            }
        });
        jToolBar.add(jButtonOpenProject);

        jButtonSaveProject.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/media-floppy.png"))); // NOI18N
        jButtonSaveProject.setFocusable(false);
        jButtonSaveProject.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonSaveProject.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonSaveProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveProjectActionPerformed(evt);
            }
        });
        jToolBar.add(jButtonSaveProject);

        jButtonExportProject.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/document-revert-rtl.png"))); // NOI18N
        jButtonExportProject.setFocusable(false);
        jButtonExportProject.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonExportProject.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonExportProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExportProjectActionPerformed(evt);
            }
        });
        jToolBar.add(jButtonExportProject);
        jToolBar.add(jSeparator1);

        jButtonAddPackage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/folder-new.png"))); // NOI18N
        jButtonAddPackage.setFocusable(false);
        jButtonAddPackage.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonAddPackage.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonAddPackage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddPackageActionPerformed(evt);
            }
        });
        jToolBar.add(jButtonAddPackage);

        jButtonAddClass.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/text-x-generic.png"))); // NOI18N
        jButtonAddClass.setFocusable(false);
        jButtonAddClass.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonAddClass.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonAddClass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddClassActionPerformed(evt);
            }
        });
        jToolBar.add(jButtonAddClass);

        jButtonAddInterface.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/text-x-generic-template.png"))); // NOI18N
        jButtonAddInterface.setFocusable(false);
        jButtonAddInterface.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonAddInterface.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonAddInterface.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddInterfaceActionPerformed(evt);
            }
        });
        jToolBar.add(jButtonAddInterface);

        jButtonAddEnum.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/text-x-script.png"))); // NOI18N
        jButtonAddEnum.setFocusable(false);
        jButtonAddEnum.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonAddEnum.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonAddEnum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddEnumActionPerformed(evt);
            }
        });
        jToolBar.add(jButtonAddEnum);
        jToolBar.add(jSeparator2);

        jButtonOptions.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/preferences-desktop.png"))); // NOI18N
        jButtonOptions.setFocusable(false);
        jButtonOptions.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonOptions.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonOptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOptionsActionPerformed(evt);
            }
        });
        jToolBar.add(jButtonOptions);
        jToolBar.add(jSeparator7);

        getContentPane().add(jToolBar, java.awt.BorderLayout.PAGE_START);

        jSplitPane.setDividerLocation(250);
        jSplitPane.setResizeWeight(0.15);

        jPanelProject.setLayout(new java.awt.BorderLayout());

        jToolBar4.setFloatable(false);
        jToolBar4.setRollover(true);
        jToolBar4.add(jSeparator3);

        jLabel2.setText("Project");
        jToolBar4.add(jLabel2);
        jToolBar4.add(jSeparator6);

        jButtonRename.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/tools-check-spelling.png"))); // NOI18N
        jButtonRename.setEnabled(false);
        jButtonRename.setFocusable(false);
        jButtonRename.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonRename.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonRename.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRenameActionPerformed(evt);
            }
        });
        jToolBar4.add(jButtonRename);

        jButtonMove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/emblem-symbolic-link.png"))); // NOI18N
        jButtonMove.setEnabled(false);
        jButtonMove.setFocusable(false);
        jButtonMove.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonMove.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonMove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMoveActionPerformed(evt);
            }
        });
        jToolBar4.add(jButtonMove);

        jButtonDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/edit-delete.png"))); // NOI18N
        jButtonDelete.setEnabled(false);
        jButtonDelete.setFocusable(false);
        jButtonDelete.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonDelete.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });
        jToolBar4.add(jButtonDelete);
        jToolBar4.add(jSeparator4);

        jPanelProject.add(jToolBar4, java.awt.BorderLayout.PAGE_START);

        jTree.setBackground(new java.awt.Color(242, 242, 242));
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        jTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTreeValueChanged(evt);
            }
        });
        jScrollPane.setViewportView(jTree);

        jPanelProject.add(jScrollPane, java.awt.BorderLayout.CENTER);

        jSplitPane.setLeftComponent(jPanelProject);

        jPanelFiles.setLayout(new java.awt.CardLayout(2, 2));
        jSplitPane.setRightComponent(jPanelFiles);

        getContentPane().add(jSplitPane, java.awt.BorderLayout.CENTER);

        jMenuFile.setText("File");

        jMenuItemNewProject.setText("New");
        jMenuFile.add(jMenuItemNewProject);

        jMenuItemOpenProject.setText("Open");
        jMenuFile.add(jMenuItemOpenProject);

        jMenuItemSaveProject.setText("Save");
        jMenuFile.add(jMenuItemSaveProject);

        jMenuItemExportProject.setText("Export");
        jMenuFile.add(jMenuItemExportProject);

        jMenuBar1.add(jMenuFile);

        jMenuAdd.setText("Add");

        jMenuItemAddPackage.setText("Package");
        jMenuAdd.add(jMenuItemAddPackage);

        jMenuItemAddClass.setText("Class");
        jMenuAdd.add(jMenuItemAddClass);

        jMenuItemAddInterface.setText("Interface");
        jMenuAdd.add(jMenuItemAddInterface);

        jMenuItemAddEnum.setText("Enum");
        jMenuAdd.add(jMenuItemAddEnum);

        jMenuBar1.add(jMenuAdd);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void updateTree() {
        final DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode(
                controller.getProject());

        controller.getProject().getChildren().forEach((child) -> {
            addNode(rootNode, child);
        });

        final TreeModel treeModel = new DefaultTreeModel(rootNode);
        jTree.setModel(treeModel);
        jTree.setShowsRootHandles(true);
    }

    private void addNode(final DefaultMutableTreeNode parent, final JNode node) {
        final DefaultMutableTreeNode treeNode
                = new DefaultMutableTreeNode(node);
        parent.add(treeNode);

        if (node instanceof JParentNode) {
            ((JParentNode) node).getChildren().forEach((child) -> {
                addNode(treeNode, child);
            });
        }
    }
    
    private void updateFile() {
        jPanelFiles.removeAll();

        final DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) (jTree.getLastSelectedPathComponent());

        if (selectedNode != null) {
            if (selectedNode.getUserObject() instanceof JClass) {
                final JClass jClass = (JClass) selectedNode.getUserObject();
                
                final ElementListPanel fieldsPanel = new ElementListPanel();
                fieldsPanel.setElements(jClass.getFields());
                jPanelFiles.add(fieldsPanel);
                fieldsPanel.setConstructors(jClass.getConstructors());
                fieldsPanel.setMethods(jClass.getMethods());
                
                fieldsPanel.setOnAddCallback(() -> {
                    ((JClass) controller.getProject().getHierarchicalChild(
                            jClass.getName())).addField(fieldsPanel.getElement());
                    updateFile();
                });
            }
        }

        jButtonRename.setEnabled(jTree.getSelectionCount() != 0);
        jButtonMove.setEnabled(jTree.getSelectionCount() != 0);
        jButtonDelete.setEnabled(jTree.getSelectionCount() != 0);

        repaint();
    }

    private void jButtonNewProjectActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonNewProjectActionPerformed
    {//GEN-HEADEREND:event_jButtonNewProjectActionPerformed
        controller.newProject();

        jButtonAddPackage.setEnabled(true);
        jButtonAddClass.setEnabled(true);
        jButtonAddInterface.setEnabled(true);
        jButtonAddEnum.setEnabled(true);

        final CreateProjectDialog dialog = new CreateProjectDialog(this);

        dialog.setOnAcceptCallback(() -> {
            controller.getProject().setName(dialog.getProjectName());
            controller.getProject().setDescription(dialog.getDescription());
            updateTree();
        });

        dialog.setVisible(true);
    }//GEN-LAST:event_jButtonNewProjectActionPerformed

    private void jButtonOpenProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOpenProjectActionPerformed
        controller.openProject(this.getRootPane());
        updateTree();
    }//GEN-LAST:event_jButtonOpenProjectActionPerformed

    private void jButtonSaveProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveProjectActionPerformed
        controller.saveProject(this.getRootPane());
    }//GEN-LAST:event_jButtonSaveProjectActionPerformed

    private void jButtonExportProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExportProjectActionPerformed
        controller.exportProject();
    }//GEN-LAST:event_jButtonExportProjectActionPerformed

    private void jButtonAddPackageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddPackageActionPerformed
        final AddPackageDialog dialog = new AddPackageDialog(this);

        final List<JNode> parentNodes
                = controller.getProject().getHierarchicalChildren(JParentNode.class);

        final String[] parentsNames = new String[parentNodes.size() + 1];
        parentsNames[0] = controller.getProject().getName();
        for (int i = 0; i < parentNodes.size(); i++) {
            parentsNames[i + 1] = parentNodes.get(i).getName();
        }

        dialog.setParentsNames(parentsNames);

        dialog.setOnAcceptCallback(() -> {
            final JPackage jPackage = new JPackage();
            jPackage.setName(dialog.getPackageName());
            jPackage.setDescription(dialog.getDescription());
            controller.getProject().addChildTo(jPackage, dialog.getParentName());
            updateTree();
        });

        dialog.setOnChangeNameCallback((name) -> {
            for (String nodeName : parentsNames) {
                if (nodeName.equals(name)) {
                    dialog.setAvailableName(false);
                    return;
                }
            }

            dialog.setAvailableName(true);
        });

        dialog.setVisible(true);
    }//GEN-LAST:event_jButtonAddPackageActionPerformed

    private void jButtonAddClassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddClassActionPerformed
        final AddClassDialog dialog = new AddClassDialog(this);

        final List<JNode> parentsNodes
                = controller.getProject().getHierarchicalChildren(JParentNode.class);

        final String[] parentsNames = new String[parentsNodes.size() + 1];
        parentsNames[0] = controller.getProject().getName();

        for (int i = 0; i < parentsNodes.size(); i++) {
            parentsNames[i + 1] = parentsNodes.get(i).getName();
        }

        dialog.setParentsNames(parentsNames);

        final List<JNode> classesNodes
                = controller.getProject().getHierarchicalChildren(JClass.class);

        final String[] classesNames = new String[classesNodes.size() + 1];
        classesNames[0] = "";

        for (int i = 0; i < classesNodes.size(); i++) {
            classesNames[i + 1] = classesNodes.get(i).getName();
        }

        dialog.setClassesNames(classesNames);

        dialog.setOnAcceptCallback(() -> {
            final JClass jClass = new JClass();
            jClass.setName(dialog.getClassName());
            jClass.setDescription(dialog.getDescription());
            jClass.setAccessibility(dialog.getAccessibility());
            jClass.setClassType(dialog.getKeyword());
            jClass.setExtension((JClass) controller.getProject().
                    getHierarchicalChild(dialog.getExtendedClassName()));
            controller.getProject().addChildTo(jClass, dialog.getParentName());
            updateTree();
        });

        dialog.setOnChangeNameCallback((name) -> {
            for (JNode child : controller.getProject().getHierarchicalChildren()) {
                if (child.getName().equals(name)) {
                    dialog.setAvailableName(false);
                    return;
                }
            }

            dialog.setAvailableName(true);
        });

        dialog.setVisible(true);
    }//GEN-LAST:event_jButtonAddClassActionPerformed

    private void jButtonAddInterfaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddInterfaceActionPerformed
        final AddInterfaceDialog dialog = new AddInterfaceDialog(this);

        final List<JNode> parentsNodes
                = controller.getProject().getHierarchicalChildren(JParentNode.class);

        final String[] parentsNames = new String[parentsNodes.size() + 1];
        parentsNames[0] = controller.getProject().getName();

        for (int i = 0; i < parentsNodes.size(); i++) {
            parentsNames[i + 1] = parentsNodes.get(i).getName();
        }

        dialog.setParentsNames(parentsNames);

        final List<JNode> interfacesNodes
                = controller.getProject().getHierarchicalChildren(JInterface.class);

        final String[] interfacesNames = new String[interfacesNodes.size() + 1];
        interfacesNames[0] = "";

        for (int i = 0; i < interfacesNodes.size(); i++) {
            interfacesNames[i + 1] = interfacesNodes.get(i).getName();
        }

        dialog.setInterfacesNames(interfacesNames);

        dialog.setOnAcceptCallback(() -> {
            final JInterface jInterface = new JInterface();
            jInterface.setName(dialog.getInterfaceName());
            jInterface.setDescription(dialog.getDescription());
            controller.getProject().addChildTo(jInterface, dialog.getParentName());
            updateTree();
        });

        dialog.setOnChangeNameCallback((name) -> {
            for (String nodeName : parentsNames) {
                if (nodeName.equals(name)) {
                    dialog.setAvailableName(false);
                    return;
                }
            }

            dialog.setAvailableName(true);
        });

        dialog.setVisible(true);
    }//GEN-LAST:event_jButtonAddInterfaceActionPerformed

    private void jButtonAddEnumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddEnumActionPerformed
        final AddEnumDialog dialog = new AddEnumDialog(this);

        final List<JNode> parentsNodes
                = controller.getProject().getHierarchicalChildren(JParentNode.class);

        final String[] parentsNames = new String[parentsNodes.size() + 1];
        parentsNames[0] = controller.getProject().getName();

        for (int i = 0; i < parentsNodes.size(); i++) {
            parentsNames[i + 1] = parentsNodes.get(i).getName();
        }

        dialog.setParentsNames(parentsNames);

        final List<JNode> interfacesNodes
                = controller.getProject().getHierarchicalChildren(JInterface.class);

        final String[] interfacesNames = new String[interfacesNodes.size() + 1];
        interfacesNames[0] = "";

        for (int i = 0; i < interfacesNodes.size(); i++) {
            interfacesNames[i + 1] = interfacesNodes.get(i).getName();
        }

        dialog.setInterfacesNames(interfacesNames);

        dialog.setOnAcceptCallback(() -> {
            final JEnum jEnum = new JEnum();
            jEnum.setName(dialog.getInterfaceName());
            jEnum.setDescription(dialog.getDescription());
            controller.getProject().addChildTo(jEnum, dialog.getParentName());

            updateTree();
        });

        dialog.setOnChangeNameCallback((name) -> {
            for (String nodeName : parentsNames) {
                if (nodeName.equals(name)) {
                    dialog.setAvailableName(false);
                    return;
                }
            }

            dialog.setAvailableName(true);
        });

        dialog.setVisible(true);
    }//GEN-LAST:event_jButtonAddEnumActionPerformed

    private void jButtonOptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOptionsActionPerformed
        final OptionsDialog dialog = new OptionsDialog(this);

        dialog.setOnAcceptCallback(() -> {

        });

        dialog.setVisible(true);
    }//GEN-LAST:event_jButtonOptionsActionPerformed

    private void jButtonRenameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRenameActionPerformed
        final RenameDialog dialog = new RenameDialog(this);

        final DefaultMutableTreeNode node = (DefaultMutableTreeNode) (jTree.getLastSelectedPathComponent());

        dialog.setDefaultName(((JNode) node.getUserObject()).getName());
        dialog.setDefaultDescription(((JNode) node.getUserObject()).getDescription());

        final List<JNode> parentsNodes = controller.getProject().
                getHierarchicalChildren(JParentNode.class);

        dialog.setOnAcceptCallback(() -> {
            if (controller.getProject() == (JNode) node.getUserObject()) {
                controller.getProject().setName(dialog.getNewName());
            } else {
                for (JNode packageNode : parentsNodes) {
                    if (packageNode == (JNode) node.getUserObject()) {
                        packageNode.setName(dialog.getNewName());
                        break;
                    }
                }
            }

            updateTree();
        });

        dialog.setOnChangeNameCallback((name) -> {
            for (JNode packageNode : parentsNodes) {
                if (packageNode.getName().equals(name)) {
                    dialog.setAvailableName(false);
                    break;
                }
            }

            dialog.setAvailableName(true);
        });

        dialog.setVisible(true);
    }//GEN-LAST:event_jButtonRenameActionPerformed

    private void jButtonMoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMoveActionPerformed
        final MoveDialog dialog = new MoveDialog(this);

        final List<JNode> parentsNodes = controller.getProject().
                getHierarchicalChildren(JParentNode.class);

        final String[] parentsNames = new String[parentsNodes.size() + 1];
        parentsNames[0] = controller.getProject().getName();

        for (int i = 0; i < parentsNodes.size(); i++) {
            parentsNames[i + 1] = parentsNodes.get(i).getName();
        }

        dialog.setParentsNames(parentsNames);

        final DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) (jTree.getLastSelectedPathComponent());

        dialog.setOnAcceptCallback(() -> {
            final JNode child = (JNode) selectedNode.getUserObject();
            controller.getProject().removeChild(child);
            controller.getProject().addChildTo(child, dialog.getParentName());
            updateTree();
        });

        dialog.setVisible(true);
    }//GEN-LAST:event_jButtonMoveActionPerformed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonDeleteActionPerformed
    {//GEN-HEADEREND:event_jButtonDeleteActionPerformed
        final DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) (jTree.getLastSelectedPathComponent());
        controller.getProject().removeChild((JNode) selectedNode.getUserObject());
        updateTree();
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTreeValueChanged
        updateFile();
    }//GEN-LAST:event_jTreeValueChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainFrame().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAddClass;
    private javax.swing.JButton jButtonAddEnum;
    private javax.swing.JButton jButtonAddInterface;
    private javax.swing.JButton jButtonAddPackage;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonExportProject;
    private javax.swing.JButton jButtonMove;
    private javax.swing.JButton jButtonNewProject;
    private javax.swing.JButton jButtonOpenProject;
    private javax.swing.JButton jButtonOptions;
    private javax.swing.JButton jButtonRename;
    private javax.swing.JButton jButtonSaveProject;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenuAdd;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenuItem jMenuItemAddClass;
    private javax.swing.JMenuItem jMenuItemAddEnum;
    private javax.swing.JMenuItem jMenuItemAddInterface;
    private javax.swing.JMenuItem jMenuItemAddPackage;
    private javax.swing.JMenuItem jMenuItemExportProject;
    private javax.swing.JMenuItem jMenuItemNewProject;
    private javax.swing.JMenuItem jMenuItemOpenProject;
    private javax.swing.JMenuItem jMenuItemSaveProject;
    private javax.swing.JPanel jPanelFiles;
    private javax.swing.JPanel jPanelProject;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JToolBar.Separator jSeparator6;
    private javax.swing.JToolBar.Separator jSeparator7;
    private javax.swing.JSplitPane jSplitPane;
    private javax.swing.JToolBar jToolBar;
    private javax.swing.JToolBar jToolBar4;
    private javax.swing.JTree jTree;
    // End of variables declaration//GEN-END:variables
}
