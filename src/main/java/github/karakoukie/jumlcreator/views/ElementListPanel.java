/*
 * Copyright (C) 2019 Tristan Muller (tristan.muller@cirad.fr)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package github.karakoukie.jumlcreator.views;

import github.karakoukie.jumlcreator.nodes.JElementNode;
import java.util.List;
import javax.swing.DefaultListModel;

/**
 *
 * @author Tristan Muller (tristan.muller@cirad.fr)
 */
public class ElementListPanel extends javax.swing.JPanel {

    public static final String FIELD_TYPE = "Fields";
    public static final String PROPERTY_TYPE = "Properties";
    public static final String CONSTRUCTOR_TYPE = "Constructors";
    public static final String METHOD_TYPE = "Field";
    
    private Runnable onAddCallback;
    final AddFieldDialog addFieldDialog;
    final AddPropertyDialog addPropertyDialog;
    final AddConstructorDialog addConstructorDialog;
    final AddMethodDialog addMethodDialog;
    private String type;

    /** Creates new form FieldListPanel */
    public ElementListPanel() {
        initComponents();
        this.addFieldDialog = new AddFieldDialog(null);
        this.addPropertyDialog = new AddPropertyDialog(null);
        this.addConstructorDialog = new AddConstructorDialog(null);
        this.addMethodDialog = new AddMethodDialog(null);
    }
    
    public final void setType(final String type) {
        this.type = type;
        jLabelTitle.setText(type);
    }

    /**
     * Change list items.
     * @param elements
     */
    public final void setElements(final List<JElementNode> elements) {
        final DefaultListModel model = new DefaultListModel();

        elements.forEach((field) -> {
            model.addElement(field.getGUIString());
        });

        jListFields.setModel(model);
    }

    public final void setOnAddCallback(final Runnable onAddCallback) {
        this.onAddCallback = onAddCallback;
    }
    
    public final JElementNode getElement() {
        switch(type) {
            case FIELD_TYPE: return addFieldDialog.getField();
            case PROPERTY_TYPE: return addPropertyDialog.getProperty();
            case CONSTRUCTOR_TYPE: return addConstructorDialog.getConstructor();
            case METHOD_TYPE: return addMethodDialog.getMethod();
        }
        
        return null;
    }

    /** This method is called from within the constructor to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBarFields = new javax.swing.JToolBar();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        jLabelTitle = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        jButtonAddField = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jSeparator9 = new javax.swing.JToolBar.Separator();
        jScrollPaneFields = new javax.swing.JScrollPane();
        jListFields = new javax.swing.JList<>();

        setLayout(new java.awt.BorderLayout());

        jToolBarFields.setFloatable(false);
        jToolBarFields.setRollover(true);
        jToolBarFields.setMinimumSize(new java.awt.Dimension(200, 40));
        jToolBarFields.setPreferredSize(new java.awt.Dimension(100, 30));
        jToolBarFields.add(jSeparator2);

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("github/karakoukie/jumlcreator/views/Bundle"); // NOI18N
        jLabelTitle.setText(bundle.getString("ElementListPanel.jLabelTitle.text")); // NOI18N
        jToolBarFields.add(jLabelTitle);
        jToolBarFields.add(jSeparator3);

        jButtonAddField.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/insert-object.png"))); // NOI18N
        jButtonAddField.setFocusable(false);
        jButtonAddField.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonAddField.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonAddField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddFieldActionPerformed(evt);
            }
        });
        jToolBarFields.add(jButtonAddField);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/preferences-desktop-personal.png"))); // NOI18N
        jButton2.setEnabled(false);
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBarFields.add(jButton2);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/edit-delete.png"))); // NOI18N
        jButton3.setEnabled(false);
        jButton3.setFocusable(false);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBarFields.add(jButton3);
        jToolBarFields.add(jSeparator9);

        add(jToolBarFields, java.awt.BorderLayout.PAGE_START);

        jListFields.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "+ amount : int" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPaneFields.setViewportView(jListFields);

        add(jScrollPaneFields, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAddFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddFieldActionPerformed
        switch(type) {
            case FIELD_TYPE:
                addFieldDialog.setOnChangeNameCallback((name) -> {
                    addFieldDialog.setAvailableName(true);
                });

                addFieldDialog.setOnAcceptCallback(() -> {
                    if (onAddCallback != null) {
                        onAddCallback.run();
                    }
                });

                addFieldDialog.setVisible(true);
                break;
            case CONSTRUCTOR_TYPE:
                addConstructorDialog.setOnChangeNameCallback((name) -> {
                    addConstructorDialog.setAvailableName(true);
                });

                addConstructorDialog.setOnAcceptCallback(() -> {
                    if (onAddCallback != null) {
                        onAddCallback.run();
                    }
                });

                addConstructorDialog.setVisible(true);
                break;
        }
    }//GEN-LAST:event_jButtonAddFieldActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButtonAddField;
    private javax.swing.JLabel jLabelTitle;
    private javax.swing.JList<String> jListFields;
    private javax.swing.JScrollPane jScrollPaneFields;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator9;
    private javax.swing.JToolBar jToolBarFields;
    // End of variables declaration//GEN-END:variables
}
